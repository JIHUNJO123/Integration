@page "/fetchproducts"
@using System.Net.Http.Json
@using System.Text.Json

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Product List</h3>
    <button class="btn btn-outline-primary" @onclick="RefreshDataAsync" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-1">Loading...</span>
        }
        else
        {
            <i class="bi bi-arrow-clockwise"></i>
            <span class="ms-1">Refresh</span>
        }
    </button>
</div>

@if (productResponse != null)
{
    <div class="alert alert-info" role="alert">
        <strong>Total Products:</strong> @productResponse.TotalCount | 
        <strong>Last Updated:</strong> @productResponse.Timestamp.ToString("yyyy-MM-dd HH:mm:ss UTC")
        @if (lastFetchTime.HasValue)
        {
            <span class="ms-2">| <strong>Cache:</strong> @lastFetchTime.Value.ToString("HH:mm:ss")</span>
        }
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="row">
    @if (isLoading)
    {
        <div class="col-12">
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading products...</p>
            </div>
        </div>
    }
    else if (products != null && products.Length > 0)
    {
        foreach (var product in products)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text flex-grow-1">
                            <strong>Price:</strong> $@product.Price.ToString("F2")<br/>
                            <strong>Stock:</strong> @product.Stock units<br/>
                            <strong>Category:</strong> @product.Category.Name
                        </p>
                        <div class="mt-auto">
                            <span class="badge bg-primary">@product.Category.Name</span>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="col-12">
            <div class="alert alert-warning" role="alert">
                No products available to display.
            </div>
        </div>
    }
</div>

@code {
    private Product[]? products;
    private string? errorMessage;
    private ProductResponse? productResponse;
    private bool isLoading = true;
    private DateTime? lastFetchTime;
    private readonly TimeSpan cacheDuration = TimeSpan.FromMinutes(5);
    
    [Inject]
    private HttpClient Http { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }
    
    private async Task LoadProductsAsync()
    {
        // Check if we have cached data that's still valid
        if (lastFetchTime.HasValue && DateTime.UtcNow - lastFetchTime.Value < cacheDuration && products != null)
        {
            isLoading = false;
            return;
        }
        
        isLoading = true;
        errorMessage = null;
        
        try
        {
            // Call the API to fetch products with updated route
            var response = await Http.GetAsync("http://localhost:5169/api/productlist");
            response.EnsureSuccessStatusCode();
            
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response: {json}"); // Debug logging
            
            productResponse = JsonSerializer.Deserialize<ProductResponse>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            
            products = productResponse?.Products?.ToArray();
            lastFetchTime = DateTime.UtcNow;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error fetching products: {ex.Message}";
            Console.WriteLine($"HTTP Error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            errorMessage = $"Error parsing product data: {ex.Message}";
            Console.WriteLine($"JSON Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Unexpected Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    // Method to refresh data (can be called from UI)
    private async Task RefreshDataAsync()
    {
        lastFetchTime = null; // Clear cache
        await LoadProductsAsync();
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
        public Category Category { get; set; } = new Category();
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class ProductResponse
    {
        public List<Product> Products { get; set; } = new List<Product>();
        public int TotalCount { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
